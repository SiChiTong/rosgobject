#!/usr/bin/env python

import roslib; roslib.load_manifest('rosgobject')
import roslib.scriptutil
import roslib.message
import rospy

import sys
import argparse

import rosgobject.graph
import rosgobject.core

from gi.repository import Gtk

class UI:
    def __init__(self, parser, args):
        self.nodepaths, self.msgclasses, self.dataattrs, self.range_list = \
                rosgobject.core.parse_topics(parser.error, args.topic, nodename='rxplot')

        self._w = Gtk.Window()

        self._build_ui(args)

        self._w.connect("delete-event", rosgobject.main_quit)
        self._w.show_all()

    def _build_ui(self, args):
        vb = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)

        self._g = []
        if args.separate:
            for nodepath,msgclass,dataattr,datarange \
                    in zip(self.nodepaths, self.msgclasses, self.dataattrs, self.range_list):

                ymin,ymax = datarange

                _g = rosgobject.graph.Plotter(
                            nodepath,
                            msgclass,
                            data_attr=dataattr,
                            ymax=ymax, ymin=ymin,
                            N=args.time if args.time is not None else 10
                )
                _g.ax.set_xlabel('time (s)')
                self._g.append(_g)

                nconds = 1
                _g.ax.legend(loc='upper right', numpoints=1,
                    columnspacing=0.05,
                    prop={'size':11} if nconds <= 4 else {'size':9},
                    ncol=1 if nconds <= 4 else 2
                )

        else:
            ymin,ymax = self.range_list
            ymax = max(ymax)
            ymin = min(ymin)

            _g = rosgobject.graph.MultiPlotter(
                        self.nodepaths,
                        self.msgclasses,
                        data_attrs=self.dataattrs,
                        ymax=ymax, ymin=ymin,
                        N=args.time if args.time is not None else 10
            )
            _g.ax.set_xlabel('time (s)')
            self._g.append(_g)

            nconds = len(self.nodepaths)
            _g.ax.legend(loc='upper right', numpoints=1,
                columnspacing=0.05,
                prop={'size':11} if nconds <= 4 else {'size':9},
                ncol=1 if nconds <= 4 else 2
            )

        for _g in self._g:
            vb.pack_start(_g, True, True, 0)

            if args.time is None:
                vb.pack_start(Gtk.Label("X Control"), False, False, 0)
                vb.pack_start(_g.xlabel_controller, False, False, 0)

        self._w.add(vb)

if __name__ == "__main__":
    import traceback

    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--time', type=float, default=None,
        help='amount of time in the past to show')
    parser.add_argument(
        '--separate', action='store_true', default=False,
        help='put topics on separate plots')

    parser.add_argument(
        'topic', nargs='+',
        help='topics to plot. the format is as follows: '\
             '/topic_name/field_name (and an optional range specifier) '\
             '/topic_name/field_name,ymin,ymax')

    argv = rospy.myargv()
    args = parser.parse_args(argv[1:])

    rospy.init_node("rxplot", anonymous=True)
    rosgobject.get_ros_thread() #ensure ros is spinning
    rosgobject.add_console_logger()
    try:
        u = UI(parser, args)
        Gtk.main()
    except:
        rospy.logfatal("crash in UI:\n%s" % traceback.format_exc())
    finally:
        rosgobject.main_quit()


